name: Build Python packages

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  binary:
    name: Build wheel for ${{ matrix.build_target.name }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.build_target.os_runner }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        build_target:
          - name: "Windows AMD64"
            os_runner: windows-latest
            python_host_arch: x64
            build_type: direct

          - name: "Windows x86"
            os_runner: windows-latest
            python_host_arch: x86
            build_type: direct

          - name: "macOS ARM64 (macOS 11+)"
            os_runner: macos-14
            python_host_arch: 'arm64'
            macos_deployment_target: "11.0"
            build_type: direct

          - name: "Linux manylinux2014 x86_64"
            os_runner: ubuntu-latest
            python_host_arch: x64
            build_type: manylinux
            manylinux_image: "quay.io/pypa/manylinux2014_x86_64"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }} on runner
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.build_target.python_host_arch }}

    - name: Install host dependencies (Twine for all, Poetry for direct builds)
      shell: bash
      run: |
        python -m pip install --upgrade pip twine
        if [ "${{ matrix.build_target.build_type }}" == "direct" ]; then
          python -m pip install poetry
        fi

    - name: Build wheel (direct)
      if: matrix.build_target.build_type == 'direct'
      shell: bash
      run: |
        # Conditionally set MACOSX_DEPLOYMENT_TARGET for macOS builds
        if [ "${{ matrix.build_target.name }}" == "macOS ARM64 (macOS 11+)" ]; then
          export MACOSX_DEPLOYMENT_TARGET="${{ matrix.build_target.macos_deployment_target }}"
        fi
        poetry build -f wheel

    - name: Build wheel (manylinux)
      if: matrix.build_target.build_type == 'manylinux'
      shell: bash
      run: |
        echo "Building manylinux wheel for Python ${{ matrix.python-version }} using ${{ matrix.build_target.manylinux_image }}"
        chmod +x .github/workflows/build_manylinux.sh
        docker run --rm \
          -v "${{ github.workspace }}":/workdir \
          "${{ matrix.build_target.manylinux_image }}" \
          /workdir/.github/workflows/build_manylinux.sh "${{ matrix.python-version }}" "/workdir"

    - name: Publish package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      shell: bash
      run: |
        ls -R dist/
        twine upload --non-interactive --skip-existing dist/*
